{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Index","react_default","a","createElement","MovieMiniature","this","props","item","Title","React","Component","Movies","state","movies","_this2","axios","get","then","res","data","console","log","setState","map","movie","App_MovieMiniature","helper","About","Users","Header","className","react_router_dom","to","AppRouter","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wSAKA,SAASA,IACL,OAAOC,EAAAC,EAAAC,cAAA,sBAGLC,mLAEE,OACIH,EAAAC,EAAAC,cAAA,oDAA4CE,KAAKC,MAAMC,KAAKC,cAH3CC,IAAMC,WAQ7BC,6MACFC,MAAQ,CACJC,OAAQ,4EAMR,OAAOZ,EAAAC,EAAAC,cAAA,WAFO,oDAKE,IAAAW,EAAAT,KAChBU,IAAMC,IAAI,+CACLC,KAAK,SAAAC,GACF,IAAML,EAASK,EAAIC,KACnBC,QAAQC,IAAIH,EAAIC,MAChBL,EAAKQ,SAAS,CAAET,8CAKxB,OACIZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,UACME,KAAKO,MAAMC,OAAOU,IAAI,SAAAC,GAAK,OAAIvB,EAAAC,EAAAC,cAACsB,EAAD,CAAgBlB,KAAMiB,OAE1DnB,KAAKqB,iBA3BDjB,IAAMC,WAiC3B,SAASiB,IACL,OAAO1B,EAAAC,EAAAC,cAAA,mBAGX,SAASyB,IACL,OAAO3B,EAAAC,EAAAC,cAAA,mBAGX,SAAS0B,IACL,OACI5B,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,UACX7B,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAMC,GAAG,KAAT,SAEJ/B,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAMC,GAAG,WAAT,WAEJ/B,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAMC,GAAG,WAAT,UAEJ/B,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAMC,GAAG,WAAT,YAsBLC,MAff,WACI,OACIhC,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACI9B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0B,EAAD,MAEA5B,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWrC,IACjCC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOC,KAAK,UAAUE,UAAW1B,IACjCV,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOC,KAAK,UAAUE,UAAWV,IACjC1B,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOC,KAAK,UAAUE,UAAWT,OC5E7BU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.7582d7d9.chunk.js","sourcesContent":["import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"./style.scss\";\n\nfunction Index() {\n    return <h2>Home</h2>;\n}\n\nclass MovieMiniature extends React.Component {\n    render() {\n        return (\n            <li>Item from movie miniature componenent: {this.props.item.Title}</li>\n        );\n    }\n}\n\nclass Movies extends React.Component {\n    state = {\n        movies: []\n    }\n\n    helper() {\n        let content = \"Test\";\n\n        return <div>{content}</div>;\n    }\n\n    componentDidMount() {\n        axios.get(\"http://localhost:8400/api/v1/movies/tracked\")\n            .then(res => {\n                const movies = res.data;\n                console.log(res.data)\n                this.setState({ movies });\n            })\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>Movies</h2>\n                <ul>\n                    { this.state.movies.map(movie => <MovieMiniature item={movie} />) }\n                </ul>\n                {this.helper()}\n            </div>\n        );\n    }\n}\n\nfunction About() {\n    return <h2>About</h2>;\n}\n\nfunction Users() {\n    return <h2>Users</h2>;\n}\n\nfunction Header() {\n    return (\n        <nav className=\"header\">\n            <ul>\n                <li>\n                    <Link to=\"/\">Home</Link>\n                </li>\n                <li>\n                    <Link to=\"/movies\">Movies</Link>\n                </li>\n                <li>\n                    <Link to=\"/about/\">About</Link>\n                </li>\n                <li>\n                    <Link to=\"/users/\">Users</Link>\n                </li>\n            </ul>\n        </nav>\n    );\n}\n\nfunction AppRouter() {\n    return (\n        <Router>\n            <div>\n                <Header />\n\n                <Route path=\"/\" exact component={Index} />\n                <Route path=\"/movies\" component={Movies} />\n                <Route path=\"/about/\" component={About} />\n                <Route path=\"/users/\" component={Users} />\n            </div>\n        </Router>\n    );\n}\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}